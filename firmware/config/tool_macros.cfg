[gcode_macro G10]
description: See M568. Passtrough to M568.
gcode:
  M568 {rawparams}



[gcode_macro M568]
description: Pnnn Rnnn Snnn An Nnnn Mnnn
  Set tool temperature.
  P= Tool number, optional. If this parameter is not provided, the current tool is used.
  R= Standby temperature(s), optional
  S= Active temperature(s), optional
  A = Heater State, optional: 0 = off, 1 = standby temperature(s), 2 = active temperature(s).
  N = Time in seconds to wait between changing heater state to standby and setting heater target temperature to standby temperature when standby temperature is lower than tool temperature.
	  Use for example 0.1 to change immediately to standby temperature.
  O = Time in seconds to wait from docking tool to shutting off the heater, optional.
	  Use for example 86400 to wait 24h if you want to disable shutdown timer.
gcode:
#  RESPOND MSG="M568: Seting new temperature: {rawparams}"
  {% set newparameters = "" %}  # Parameters to be passed to subroutines in new format.

  # P= Tool number
  {% if params.P is defined %}
	{% set newparameters = newparameters ~ " TOOL="~params.P %}                   # Set heater_standby_temp to new parameters.
  {% endif %}

  # R= Standby temperature
  {% if params.R is defined %}
	{% set newparameters = newparameters ~ " STDB_TMP="~params.R %}                   # Set heater_standby_temp to new parameters.
  {% endif %}

  # S= Active temperature
  {% if params.S is defined %}
	{% set newparameters = newparameters ~ " ACTV_TMP="~params.S %}                    # Set heater_active_temp to new parameters.
  {% endif %}

  # N = Time in seconds to wait from docking tool to putting the heater in standy
  {% if params.N is defined %}
	{% set newparameters = newparameters ~ " STDB_TIMEOUT="~params.N %}                  # Set idle_to_standby_time to new parameters.
  {% endif %}

  # M = Time in seconds to wait from docking tool to shuting off the heater
  {% if params.O is defined %}
	{% set newparameters = newparameters ~ " SHTDWN_TIMEOUT="~params.O %}                  # Set idle_to_powerdown_time to new parameters.
  {% endif %}

  # A = Heater State, optional: 0 = off, 1 = standby temperature(s), 2 = active temperature
  {% if params.A is defined %}
	{% set newparameters = newparameters ~ " CHNG_STATE="~params.A %}                            # Set idle_to_powerdown_time to new parameters.
  {% endif %}

  #{action_respond_info("M568: Running: SET_TOOL_TEMPERATURE"~newparameters)}
  
  SET_TOOL_TEMPERATURE{newparameters}

[gcode_macro M116]
description: Pnnn Hnnn Snnn
  Waits for all temperatures, or a specified tool or heater's temperature.
  This command can be used without any additional parameters.
  Without parameters it waits for bed and current extruder.
  Only one of either P or H may be used.

  Pnnn Tool number.
  Hnnn Heater number. 0="heater_bed", 1="extruder", 2="extruder1", etc.
  Snnn Tolerance in degC. Defaults to 1*C. Wait will wait until heater is between set temperature +/- tolerance.

gcode:
  {% set newparameters = "" %}  # Parameters to be passed to subroutine in new format.


  {% if params.P is defined %}
	{% set newparameters = newparameters ~ " TOOL=" ~ params.P %}                   # Set Tool to new parameters.
  {% endif %}

  {% if params.H is defined %}
	{% set newparameters = newparameters ~ " HEATER=" ~ params.H %}                   # Set Tool to new parameters.
  {% endif %}

  {% if params.S is defined %}
	{% set newparameters = newparameters ~ " TOLERANCE=" ~ params.S %}                   # Set Tool to new parameters.
  {% endif %}

  TEMPERATURE_WAIT_WITH_TOLERANCE{newparameters}


[gcode_macro TOOL_DROPOFF]
gcode:
  T_1



[gcode_macro SAVE_ACCELERATION]
variable_max_accel: 0
gcode:
  SET_GCODE_VARIABLE MACRO=SAVE_ACCELERATION VARIABLE=max_accel VALUE={printer.toolhead.max_accel}

[gcode_macro RESTORE_ACCELERATION]
gcode:
  {% if printer['gcode_macro SAVE_ACCELERATION'].max_accel|int == 0 %}
	{ action_respond_info("RESTORE_ACCELERATION: No acceleration saved.") }
  {% else %}
	M204 S{printer['gcode_macro SAVE_ACCELERATION'].max_accel}
  {% endif %}

[gcode_macro CLAMP_DOWN]
gcode:
		SERVO_TURN_ON
		G4 P500
		SET_SERVO SERVO=clamp ANGLE=160
		SET_GCODE_VARIABLE MACRO=CLAMP_STATUS VARIABLE=clamp_status VALUE=1
		G4 P1000
		SERVO_TURN_OFF
		SET_SERVO SERVO=clamp width=0
		
[gcode_macro CLAMP_UP]
gcode:
		SERVO_TURN_ON
		G4 P500
		SET_SERVO SERVO=clamp ANGLE=0
		SET_GCODE_VARIABLE MACRO=CLAMP_STATUS VARIABLE=clamp_status VALUE=0
		G4 P1000
		SERVO_TURN_OFF
		SET_SERVO SERVO=clamp width=0

	

	
[gcode_macro test1]
gcode:
	T0
	T1
	T2
	T3
	T4
	T5
[gcode_macro CHECK_ALL_TOOLS]
gcode:
	G28
	T0
	T1
	T2
	T3
	T4
	T5
	T_1
	
	
[gcode_macro MOVE_AROUND_BED]
gcode:
	G1 X0 Y0 F12000
	G1 X300 Y0 F12000
	#G1 X300 Y225 F12000
	#G1 X0 Y225 F12000
	#G1 X150 Y125 F12000
	
# prime the nozzle 
[gcode_macro PRIME_LINE_WITH_TOOL]
gcode: 
    #M117 Priming Line
    {% if "z" not in printer.toolhead.homed_axes %} ; G28 Home if needed
        G28             ; home
    {% endif %}
    SAVE_GCODE_STATE NAME=PRIME_LINE_state
    
    {% set x_offset = params.T|int * 0.4 %}
    
    G90                                 ; absolute positioning
    G92 E0                              ; reset extruder
    G1 Z5.0 F3000                       ; move Z Axis up
    G1 X{x_offset|int + 10} Y50 Z0.2 F5000.0            ; move to start position
    G1 X{x_offset|int + 10} Y175 Z0.2 F1000.0 E15     ; draw the first line
    G1 X{x_offset|int + 10.4} Y175 Z0.2 F5000.0         ; move to side a little
    G1 X{x_offset|int + 10.4} Y50 Z0.2 F1000.0 E30        ; draw the second line
    G92 E0                              ; reset Extruder
    G1 Z5.0 F3000                       ; move Z Axis up
    G1 X40 Y50 F2000.0 
    RESTORE_GCODE_STATE NAME=PRIME_LINE_state
    
[gcode_macro TEST_FILAMENT_TIP]
gcode:
	G28
	T_1
	T{params.T}
	M109 T{params.T} S195
	{% for move in range(30) %}
	  G1 E30 F300
	  FORM_FILAMENT_TIP_V6 T={params.T}
	{% endfor %}

[gcode_macro GET_HOTEND_EXTRUDE_LENGTH]
gcode:

	{%set myself = printer['tool '~params.T]%}  

	#G28
	#T_1
	#T{params.T}
	#M109 T{params.T} S195
    
    #initial extruder and tip formation
    G1 E70 F300
    FORM_FILAMENT_TIP T={params.T}	 


	#start from 
	
	
	{% for move in range(5) %}
			{% for e in range(1) %}
				M83
				M118 MOVE {move}
				G1 E3 F200                     # DeRetract filament from meltzone
				M118 G1 E3 F200
				G1 E{myself.meltzonelength|int-5} F2000                     # DeRetract filament from meltzone
				M118 G1 E{myself.meltzonelength|int-5} F700
				G1 E{((16-move|int)/10) + 3.75} F700
				M118 G1 E{((16-move|int)/10) + 3.75} F700
				
				G4 P5000
				
				 G1 E-3 F2700
				 G1 E-1 F3000
				 G1 E2 F800
				FORM_FILAMENT_TIP T={params.T}	 
		    {% endfor %}
	{% endfor %}

