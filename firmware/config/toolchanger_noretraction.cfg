# Config order: ToolGroups must come before tools that use them. Tool that are used as physical_parent must be configured before other virtual tools that use that as parent.

[respond]

[include matrix_display.cfg]
[include xyz_offset_probe.cfg]
[include motor_torque.cfg]
[include intelligent_error_detection.cfg]
[include servo_macros.cfg]
[include tool_usage.cfg]
[include tool_macros.cfg]
[include toolchange_management.cfg]
[include filament_sensors.cfg]

[include slack_notifications.cfg]
[include timelapse.cfg]

[include delayed_gcode.cfg]


# Enables saving of variables between powerdown of machine. Must be configured before [toollock].
[save_variables]
filename:  ~/printer_data/config/variables.cfg



#######################
##  TOOLS CONFIG     ##
#######################

[atc_switch 0]
pin:PG13
press:
	#M118 0 PRESSED
release:
	#M118 0 RELEASE

[atc_switch 1]
pin:PG6
press:
	#M118 1 PRESSED
release:
	#M118 1 RELEASE

[atc_switch 2]
pin:PG12
press:
	#M118 2 PRESSED
release:
	#M118 2 RELEASE

[atc_switch 3]
pin:PG14
press:
	#M118 3 PRESSED
release:
	#M118 3 RELEASE

[atc_switch 4]
pin:PG15
press:
	#M118 4 PRESSED
release:
	#M118 4 RELEASE

[atc_switch 5]
pin:PG9
press:
	#M118 5 PRESSED
release:
	#M118 5 RELEASE


[atc_switch carriage]
pin:mcu1:P1.25
press:
	#M118 C PRESSED
release:
	#M118 C RELEASE



[toollock]
purge_on_toolchange = True          # Here we can disable all purging. When disabled it overrides all other purge options. Defaults to true. This can be turned off by a macro for automatic probing hot tools without probing them. For example when doing TAMV or ZTATP.
LogLevel = 0                        # How much debugging text to print to console. 0=minimum, 1=some, 2=all.
init_printer_to_last_tool = True   #Initialise as it was turned off, unlock tool if none was loaded or lock if one was loaded. Defaults to True
tool_lock_gcode:
	SAVE_GCODE_STATE NAME=tool_unlock_state                                         # Save gcode state
	{% if printer["gcode_macro CLAMP_STATUS"].clamp_status|int == 1 %}
		#SERVO_TURN_ON
		G4 P100
		SET_SERVO SERVO=clamp ANGLE=0
		SET_GCODE_VARIABLE MACRO=CLAMP_STATUS VARIABLE=clamp_status VALUE=0
		G4 P600
		#SERVO_TURN_OFF
		SET_SERVO SERVO=clamp width=0
	{% endif %}
	RESTORE_GCODE_STATE NAME=tool_unlock_state MOVE=0                               # Restore gcode state
	#M118 "Unknown tool Loaded"                                                      # Tool Loaded Message that stays on display.

tool_unlock_gcode:
	SAVE_GCODE_STATE NAME=tool_lock_state                                           # Save gcode state
	{% if printer["gcode_macro CLAMP_STATUS"].clamp_status|int == 0 %}
		#SERVO_TURN_ON
		G4 P100
		SET_SERVO SERVO=clamp ANGLE=160
		SET_GCODE_VARIABLE MACRO=CLAMP_STATUS VARIABLE=clamp_status VALUE=1
		
		G4 P600
		#SERVO_TURN_OFF
		SET_SERVO SERVO=clamp width=0
	{% endif %}
	RESTORE_GCODE_STATE NAME=tool_lock_state MOVE=0                                 # Restore gcode state
	#M118 Tool Unloaded                                                              # Tool UnLoaded Message that stays on display.


# Used to group several tools with similar settings.
[toolgroup 0]
is_virtual: False            # If True then must have a physical_parent declared and shares extruder, hotend and fan with the physical_parent
pickup_gcode: 
  SUB_TOOL_PICKUP_START T={myself.name}
  SUB_TOOL_PICKUP_END T={myself.name}

dropoff_gcode:
  SUB_TOOL_DROPOFF_START T={myself.name}
  SUB_TOOL_DROPOFF_END T={myself.name}



##### Selectable tool. Must be configured after [toolgroup n].
[tool 0]
tool_group: 0                     # Must be used and configured before this tool
extruder: extruder
zone: 150,120
park: 22,326
meltzonelength: 2 #18                 # Defaults to 0
idle_to_standby_time: 0.1          # Time in seconds from being parked to setting temperature to standby the temperature above. Use 0.1 to change imediatley to standby temperature. Defaults to 30
#idle_to_powerdown_time: 600       # Time in seconds from being parked to setting temperature to 0. Use something like 86400 to wait 24h if you want to disable. Defaults to 600
lazy_home_when_parking: 1           # (default: 0 - disabled) - When set to 1, will home unhomed XY axes if needed and will not move any axis if already homed and parked. 2 Will also home Z if not homed.
#shaper_freq_x: 137.2
#shaper_freq_y: 116.4
#shaper_type_x: 2hump_ei
#shaper_type_y: 2hump_ei
extra_extrude_mm: 0
hotend_type:DRAGONHF


[tool 1]
tool_group: 0                     # Must be used and configured before this tool
extruder: extruder1
zone: 150,120
park: 78,326
meltzonelength: 2 #18                 # Defaults to 0
idle_to_standby_time: 0.1          # Time in seconds from being parked to setting temperature to standby the temperature above. Use 0.1 to change imediatley to standby temperature. Defaults to 30
#idle_to_powerdown_time: 300       # Time in seconds from being parked to setting temperature to 0. Use something like 86400 to wait 24h if you want to disable. Defaults to 600
lazy_home_when_parking: 1           # (default: 0 - disabled) - When set to 1, will home unhomed XY axes if needed and will not move any axis if already homed and parked. 2 Will also home Z if not homed.
extra_extrude_mm: 0
hotend_type:DRAGONST


[tool 2]
tool_group: 0                     # Must be used and configured before this tool
extruder: extruder2
zone: 150,120
park: 133.2,326.5
meltzonelength: 2 #18                 # Defaults to 0
idle_to_standby_time: 0.1          # Time in seconds from being parked to setting temperature to standby the temperature above. Use 0.1 to change imediatley to standby temperature. Defaults to 30
#idle_to_powerdown_time: 300       # Time in seconds from being parked to setting temperature to 0. Use something like 86400 to wait 24h if you want to disable. Defaults to 600
lazy_home_when_parking: 1           # (default: 0 - disabled) - When set to 1, will home unhomed XY axes if needed and will not move any axis if already homed and parked. 2 Will also home Z if not homed.
extra_extrude_mm: 0
hotend_type:DRAGONHF

[tool 3]
tool_group: 0                     # Must be used and configured before this tool
extruder: extruder3
zone: 150,120
park: 188,327
meltzonelength: 2 #18                 # Defaults to 0
idle_to_standby_time: 0.1          # Time in seconds from being parked to setting temperature to standby the temperature above. Use 0.1 to change imediatley to standby temperature. Defaults to 30
#idle_to_powerdown_time: 300       # Time in seconds from being parked to setting temperature to 0. Use something like 86400 to wait 24h if you want to disable. Defaults to 600
lazy_home_when_parking: 1           # (default: 0 - disabled) - When set to 1, will home unhomed XY axes if needed and will not move any axis if already homed and parked. 2 Will also home Z if not homed.
extra_extrude_mm: 0
hotend_type:V6

[tool 4]
tool_group: 0                     # Must be used and configured before this tool
extruder: extruder4
zone: 150,120
park: 243.7,327.5
meltzonelength: 2 #18                 # Defaults to 0
idle_to_standby_time: 0.1          # Time in seconds from being parked to setting temperature to standby the temperature above. Use 0.1 to change imediatley to standby temperature. Defaults to 30
#idle_to_powerdown_time: 300       # Time in seconds from being parked to setting temperature to 0. Use something like 86400 to wait 24h if you want to disable. Defaults to 600
lazy_home_when_parking: 1           # (default: 0 - disabled) - When set to 1, will home unhomed XY axes if needed and will not move any axis if already homed and parked. 2 Will also home Z if not homed.
extra_extrude_mm: 0
hotend_type:V6

[tool 5]
tool_group: 0                     # Must be used and configured before this tool
extruder: extruder5
zone: 150,120
park: 299.4,328
meltzonelength: 2 #18                 # Defaults to 0
idle_to_standby_time: 0.1          # Time in seconds from being parked to setting temperature to standby the temperature above. Use 0.1 to change imediatley to standby temperature. Defaults to 30
#idle_to_powerdown_time: 300       # Time in seconds from being parked to setting temperature to 0. Use something like 86400 to wait 24h if you want to disable. Defaults to 600
lazy_home_when_parking: 1           # (default: 0 - disabled) - When set to 1, will home unhomed XY axes if needed and will not move any axis if already homed and parked. 2 Will also home Z if not homed.
extra_extrude_mm: 0
hotend_type:V6

[gcode_macro SUB_TOOL_PICKUP_START]
description: Internal subroutine. Do not use!
# Tnnn: Tool to pickup
gcode:

  {%set myself = printer['tool '~params.T]%}
  
  
  {% if printer["gcode_macro STORE_TOOLHEAD_POSITION"].toolhead_pos_stored|int == 0 %}  
	  #{% if printer[myself.extruder].can_extrude|default("false")|lower == 'true' %}
	 	 STORE_TOOLHEAD_POSITION X={printer.toolhead.position.x} Y={printer.toolhead.position.y}
	  #{% endif %}
  {% endif %}

  ##Turn Off All Filament Sensors
  TURN_OFF_ALL_FILAMENT_SENSORS
 
  ##Enable Specific Tool Filament Sensor  
  #ENABLE_FILAMENT_SENSOR T={params.T}
  
  
  
  #SET TMC Current to High on X AND Y
  
  M568 P{myself.name} A2                                               # Put tool heater in Active mode

  XY_HIGH_TORQUE_START
  
  SAVE_ACCELERATION                                                    # Save current acceleration value.
  M204 S10000                                                           # Set high acceleration for toolchanging
  SAVE_POSITION
  SAVE_GCODE_STATE NAME=TOOL_PICKUP                                    # Save GCODE state. Will be restored at the end of SUB_TOOL_PICKUP_END
  G90
  ##############  Move in to parking spot  ##############
  G0 X{myself.park[0]|int} Y270  F20000                                # Fast Move near the pickup position for tool.
  G0 Y{myself.park[1]|int-30} F6000                                           # Slow Move to the pickup position for tool.
  G0 Y{myself.park[1]|int-5} F3000                                           # Slow Move to the pickup position for tool.
  G0 Y{myself.park[1]} F1500                                           # Slow Move to the pickup position for tool. 
  
  ##############  Lock Tool  ##############
  M400                                                                 # Wait for all moves to finish.
  TOOL_LOCK                                                            # Lock the tool.
  #SET_GCODE_OFFSET Z={offset_z|float} MOVE=1                         # Set and move the Z offset. Avoid crashing into bed when moving out later.
  
  ## Tool Picked - Change Display to the Tool Loaded
  DISPLAYTOOL T={params.T} STATUS=PASS
  
  #M118 T{params.T} : {printer["gcode_macro TOOL_USE_COUNT"]['t'~params.T~'_use_count']|int}
      
  ##############  Wait for heater  ##############
  {% if myself.extruder|default("none")|lower !="none"  %}              # If the tool has an extruder:
  	{% if (printer[myself.extruder].can_extrude|default("false")|lower == 'false') or (printer["gcode_macro TOOL_USE_COUNT"]['t'~params.T~'_use_count']|int == 0 )  %}
		#M118 - We wait for tool to reach temp
		SET_GCODE_VARIABLE MACRO=TOOL_USE_COUNT VARIABLE=current_nozzle_prime VALUE=1
		M116 P{myself.name}                                                  # Wait for tool to reach target temperature.	
	{% endif %} 
  {% endif %}                                                          # /
  
  

 

  ##############  Finnish up  ##############
 	                       # Restore GCODE state. Was saved at thebegining of SUB_TOOL_PICKUP_START. Move fast to last location.
   RESTORE_GCODE_STATE NAME=TOOL_PICKUP
  
  ##############  Return to saved position  ##############
  RESTORE_POSITION
  TIMELAPSE_TAKE_FRAME

[gcode_macro SUB_TOOL_PICKUP_END]
description: Internal subroutine. Do not use!
# Tnnn: Tool to pickup
gcode:

	
    G91
	G1 Z5 F10000
	G90	

   {%set myself = printer['tool '~params.T]%}

   {% if 't0_x_offset' not in printer.save_variables.variables %}
      {%set offset_x =  0 %}
      {%set offset_y =  0 %}
      {%set offset_z = 0 %}  
  {% else %}
      {%set offset_x =  0 - printer.save_variables.variables['t'~params.T~'_x_offset']|float%}
      {%set offset_y =  0 - printer.save_variables.variables['t'~params.T~'_y_offset']|float%}
      {%set offset_z = 0 - printer.configfile.config['probe']['z_offset']|float - printer.save_variables.variables['t'~params.T~'_z_offset']|float %}
  {% endif %}

  M118 T{params.T}
  M118 OFFSET X: {offset_x}
  M118 OFFSET Y: {offset_y}
  M118 OFFSET Z: {offset_z}

  SAVE_GCODE_STATE NAME=TOOL_PICKUP2                            # Save state for priming nozzle
  
  ##############  Prime the filament, asume it was retracted as per e3d Revo documentation  ##############
  {% if myself.extruder|default("none")|lower !="none" %}       # If the tool has an extruder:
    # If can extrude and global purge is active:
      ##M118 Inside the Purge Loop Condition for extruder
      ##M118 Extruder Can Purge: {printer[myself.extruder].can_extrude}
	 {% if printer[myself.extruder].can_extrude|default("false")|lower == 'true' %}
          #M118 Inside the Purge Condition for extrude and global purge
    	  M83                                                           # Relative extrusion
    	  #G1 E3 F200                     # DeRetract filament from meltzone
    	  G1 E{myself.meltzonelength|int} F2000                     # DeRetract filament from meltzone
    	  
    	   {% if printer["gcode_macro TOOL_USE_COUNT"]['current_nozzle_prime']|int == 1  %}
    	        ##M118 First Pickup 
    	        ##M118 Inside Initial Purge
    	        # First pickup for this specific tool - we Purge Extra
    	   		{% set current_fan_speed = printer.fan.speed * 255 %}
    	   		M106 S255	
			    G0 Y{myself.park[1]|int - 45.5} F3000			    														 
                G1 E25 F250    #Prime the Nozzle and Ensure Filament is flowing through 
				G1 E{myself.extra_extrude_mm|float} F1000
                {% if printer["gcode_macro FILAMENT_EXTRA_EXTRUDE_LENGTH"].filament_extra_extrude_length|int > 0 %}
					G1 E{printer["gcode_macro FILAMENT_EXTRA_EXTRUDE_LENGTH"].filament_extra_extrude_length|int * 5} F1000	
				{% endif %}
				G4 P5000
			    G0 Y{myself.park[1]|int - 10} F8000			    														 
			    G0 Y{myself.park[1]|int - 50} F8000			    														 
			    G0 Y{myself.park[1]|int - 10} F8000		
				
				M106 S{current_fan_speed|int}

    	    {% endif %}
	{% endif %}
  {% endif %}
  
  
  RESTORE_GCODE_STATE NAME=TOOL_PICKUP2                          # Restore state after priming nozzle
  RESTORE_ACCELERATION

  ##############  Move out to zone  ##############
  
  G0 Y300 F3000
  G0 Y270 F8000
  G0 F20000 
  
  #Move to the last position of toolhead before toolchange

	{% if printer["gcode_macro STORE_TOOLHEAD_POSITION"].toolhead_pos_stored|int == 1 %}
 	  M118 Move to old toolhead position
	  G1 X{printer["gcode_macro STORE_TOOLHEAD_POSITION"].toolhead_x} Y{printer["gcode_macro STORE_TOOLHEAD_POSITION"].toolhead_y} 
	{% endif %}
	

 	XY_HIGH_TORQUE_STOP
    
    {% if printer[myself.extruder].can_extrude|default("false")|lower == 'true' and  printer["gcode_macro TOOL_USE_COUNT"]['current_nozzle_prime']|int == 0 %}
  	  M118 Extra Extrusion 
  	  G1 E2.25 F350
 	  G1 E{myself.extra_extrude_mm|float} F350	  		
  	  {% if printer["gcode_macro FILAMENT_EXTRA_EXTRUDE_LENGTH"].filament_extra_extrude_length|float > 0 %}
 		 	  M118 Extruding Extra {printer["gcode_macro FILAMENT_EXTRA_EXTRUDE_LENGTH"].filament_extra_extrude_length}mm as per FILAMENT_EXTRA_EXTRUDE_LENGTH
 		 	  G1 E{printer["gcode_macro FILAMENT_EXTRA_EXTRUDE_LENGTH"].filament_extra_extrude_length|float} F350	  		
  	  {% endif %}
  	  RESET_FILAMENT_EXTRA_EXTRUDE_LENGTH
	{% endif %}

    {% if printer[myself.extruder].can_extrude|default("false")|lower == 'true' and  printer["gcode_macro TOOL_USE_COUNT"]['current_nozzle_prime']|int == 1 %}
  	  #M118 Extra Extrusion 
 	  G1 E{myself.extra_extrude_mm|float} F350	  		
     {% if printer["gcode_macro FILAMENT_EXTRA_EXTRUDE_LENGTH"].filament_extra_extrude_length|float > 0 %}
 		G1 E{printer["gcode_macro FILAMENT_EXTRA_EXTRUDE_LENGTH"].filament_extra_extrude_length|float} F350	
     {% endif %}
	 G1 E0.5 F350 

	{% endif %}  
  
  {% if printer["gcode_macro AUTO_XYZ_PROBE"].xyz_probe_flag|int != 1 %}
     SET_GCODE_OFFSET X={offset_x|float} Y={offset_y|float} Z={offset_z|float} MOVE=0  # Set X and Y offsets, 
  {% endif %}
  
    #{% if printer[myself.extruder].can_extrude|default("false")|lower == 'true' %}
		CLEAR_TOOLHEAD_POSITION
	#{% endif %}
	
  INCREMENT_TOOL_USE_COUNT T={params.T}
  SET_GCODE_VARIABLE MACRO=TOOL_USE_COUNT VARIABLE=current_nozzle_prime VALUE=0

  G91
  G1 Z-5 F10000
  G90

[gcode_macro SUB_TOOL_DROPOFF_START]
description: Internal subroutine. Do not use!
# Tnnn: Tool to pickup
gcode:
	
  {%set myself = printer['tool '~params.T]%}  
  
  {% if printer["gcode_macro STORE_TOOLHEAD_POSITION"].toolhead_pos_stored|int == 0 %}  
	  #{% if printer[myself.extruder].can_extrude|default("false")|lower == 'true' %}
	 	 STORE_TOOLHEAD_POSITION X={printer.toolhead.position.x} Y={printer.toolhead.position.y}
	  #{% endif %}
  {% endif %} 	 

  SAVE_ACCELERATION                                            # Save current acceleration value.
  M204 S10000                                                   # Set high acceleration for toolchanging
 
  {% if myself.name|int != printer.toollock.tool_current|int %}
	{ action_raise_error("SUB_TOOL_DROPOFF_START: Wrong tool. Asked to dropoff T" ~ myself.name ~ " while current is T" ~ printer.toollock.tool_current ~ ".") }
  {% endif %}

  ##############  Retract the filament as per e3d Revo documentation  ##############
  {% if myself.extruder|default("none")|lower !="none" %}       # If the tool has an extruder:
	M568 P{myself.name} A1                                        # Put tool heater in standby
	{% if printer[myself.extruder].can_extrude|default("false")|lower == 'true' and printer.toollock.purge_on_toolchange %}
	  M83                                                           # Relative extrusion
	  G1 E-1 F2700                                                  # retract filament from meltzone
	  #G1 E2 F800                                                    # Extrude slightly to form a tip
	{% endif %}
  {% endif %}

 ##############  Move in to parking spot  ##############
  G0 X{myself.park[0]|int} Y280  F20000               # Fast Move near the pickup position for tool.
  G0 Y{myself.park[1]|int-35} F6000                                           # Slow Move to the pickup position for tool.
  G0 Y{myself.park[1]|int-1} F1500                                           # Slow Move to the pickup position for tool.
  {% if printer[myself.extruder].can_extrude|default("false")|lower == 'true' and printer.toollock.purge_on_toolchange %}
    #M83                                                           # Relative extrusion
    #G1 E-{myself.meltzonelength|int} F1500
    #FORM_FILAMENT_TIP T={params.T}	 
  {% endif %}

  SET_GCODE_OFFSET X=0 Y=0                                      # Set XY offset to 0 so we park the tool right.
  SAVE_GCODE_STATE NAME=TOOL_DROPOFF_002                        # Save GCode state.
  G90                                                           # Absolute positions
  M400                                # Wait for current moves to finish
  XY_HIGH_TORQUE_START
  TOOL_UNLOCK                         # Unlock the tool

  G0 Y300 F4000
  G0 Y280 F8000
  M400
  
  ## Tool Dropped- Change Display to No Tool Loaded
  DISPLAYTOOL T=-1 STATUS=PASS
  
[gcode_macro SUB_TOOL_DROPOFF_END]
description: Internal subroutine. Do not use!
# Tnnn: Tool to pickup
gcode:
  {%set myself = printer['tool '~params.T]%}

  RESTORE_GCODE_STATE NAME=TOOL_DROPOFF_002 MOVE=0   # Restore Gcode state
  RESTORE_ACCELERATION                # Restore saved acceleration value.
  #XY_HIGH_TORQUE_STOP
  
  
[gcode_macro FORM_FILAMENT_TIP]
gcode:  
	 {%set myself = printer['tool '~params.T]%}    
	 {% if myself.hotend_type != "V6" %}
    	G1 E-{myself.meltzonelength|int} F1500                     # Retract filament from meltzone
	 {% else %}
	 	FORM_FILAMENT_TIP_V6
	 {% endif %}
	 
	 
[gcode_macro FORM_FILAMENT_TIP_DRAGON]
gcode:
		{%set myself = printer['tool '~params.T]%}  
    	G1 E-{myself.meltzonelength|int} F1500                     # Retract filament from meltzone
  
[gcode_macro FORM_FILAMENT_TIP_V6]
gcode:

	{%set myself = printer['tool '~params.T]%}  
    {% set INITIAL_COOLING_SPEED = params.INITIAL_COOLING_SPEED|default(10) %}
    {% set FINAL_COOLING_SPEED = params.FINAL_COOLING_SPEED|default(50) %}
    {% set COOLING_MOVES = params.COOLING_MOVES|default(5) %}


    G91
    G92 E0
 	G1 E-{myself.meltzonelength|int-7} F15000
	G1 E-4 F1200
	G1 E-2.5 F600
	G1 E-0.5 F400
	
	# Generate Cooling Moves
	{% set SPEED_INC = (FINAL_COOLING_SPEED|float - INITIAL_COOLING_SPEED|float) / (2 * COOLING_MOVES|float - 1) %}
	{% for move in range(COOLING_MOVES|int) %}
	  G1 E10 F{(INITIAL_COOLING_SPEED|float + SPEED_INC*move*2) * 60}
	  G1 E-10 F{(INITIAL_COOLING_SPEED|float + SPEED_INC*(move*2+1)) * 60}
	{% endfor %}
	
	


